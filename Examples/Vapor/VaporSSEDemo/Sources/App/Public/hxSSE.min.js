!(function () {
  var e;
  function t(e) {
    return new EventSource(e, { withCredentials: !0 });
  }
  function n(t) {
    if (!e.bodyContains(t)) {
      var n = e.getInternalData(t).sseEventSource;
      if (null != n) return n.close(), !0;
    }
    return !1;
  }
  function r(t, n) {
    var r = [];
    return (
      e.hasAttribute(t, n) && r.push(t),
      t.querySelectorAll('[' + n + '], [data-' + n + ']').forEach(function (e) {
        r.push(e);
      }),
      r
    );
  }
  function s(t, n) {
    e.withExtensions(t, function (e) {
      n = e.transformResponse(n, null, t);
    });
    var r = e.getSwapSpecification(t),
      s = e.getTarget(t);
    e.swap(s, n, r);
  }
  function a(t) {
    return null != e.getInternalData(t).sseEventSource;
  }
  htmx.defineExtension('sse', {
    init: function (n) {
      (e = n), null == htmx.createEventSource && (htmx.createEventSource = t);
    },
    onEvent: function (t, o) {
      var i = o.target || o.detail.elt;
      switch (t) {
        case 'htmx:beforeCleanupElement':
          var u = e.getInternalData(i);
          return void (u.sseEventSource && u.sseEventSource.close());
        case 'htmx:afterProcessNode':
          !(function t(o, i) {
            var u;
            if (null == o) return null;
            r(o, 'sse-connect').forEach(function (r) {
              var s,
                a,
                o,
                u,
                c = e.getAttributeValue(r, 'sse-connect');
              null != c &&
                ((s = r),
                (a = c),
                (o = i),
                ((u = htmx.createEventSource(a)).onerror = function (r) {
                  if (
                    (e.triggerErrorEvent(s, 'htmx:sseError', {
                      error: r,
                      source: u,
                    }),
                    !n(s) && u.readyState === EventSource.CLOSED)
                  ) {
                    var a = Math.random() * (2 ^ (o = o || 0)) * 500;
                    window.setTimeout(function () {
                      t(s, Math.min(7, o + 1));
                    }, a);
                  }
                }),
                (u.onopen = function (t) {
                  e.triggerEvent(s, 'htmx:sseOpen', { source: u });
                }),
                (e.getInternalData(s).sseEventSource = u));
            }),
              r((u = o), 'sse-swap').forEach(function (t) {
                var r = e.getClosestMatch(t, a);
                if (null == r) return null;
                for (
                  var o = e.getInternalData(r).sseEventSource,
                    i = e.getAttributeValue(t, 'sse-swap').split(','),
                    c = 0;
                  c < i.length;
                  c++
                ) {
                  var l = i[c].trim(),
                    v = function (a) {
                      if (!n(r)) {
                        if (!e.bodyContains(t))
                          return void o.removeEventListener(l, v);
                        e.triggerEvent(u, 'htmx:sseBeforeMessage', a) &&
                          (s(t, a.data),
                          e.triggerEvent(u, 'htmx:sseMessage', a));
                      }
                    };
                  (e.getInternalData(t).sseEventListener = v),
                    o.addEventListener(l, v);
                }
              }),
              r(u, 'hx-trigger').forEach(function (t) {
                var r = e.getClosestMatch(t, a);
                if (null == r) return null;
                var s = e.getInternalData(r).sseEventSource,
                  o = e.getAttributeValue(t, 'hx-trigger');
                if (null != o && 'sse:' == o.slice(0, 4)) {
                  var i = function (a) {
                    !n(r) &&
                      (e.bodyContains(t) || s.removeEventListener(o, i),
                      htmx.trigger(t, o, a),
                      htmx.trigger(t, 'htmx:sseMessage', a));
                  };
                  (e.getInternalData(u).sseEventListener = i),
                    s.addEventListener(o.slice(4), i);
                }
              });
          })(i);
      }
    },
  });
})();
